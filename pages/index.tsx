import { FilterList, Send, Subject } from "@mui/icons-material";
import { AppBar, Box, Button, Toolbar, useMediaQuery } from "@mui/material";
import type { NextPage } from "next";
import Head from "next/head";
import Image from "next/image";
import { EmailTemplateDrawer } from "../src/components/email-template-drawer/EmailTemplateDrawer";
import { FilterDrawer } from "../src/components/filter-drawer/FilterDrawer";
import { useMemo, useState } from "react";
import { useContacts } from "../src/common/contacts-context";
import { useEmailTemplate } from "../src/common/email-template-context";
import { useExclusionList } from "../src/common/exclusion-context";
import { ContactList } from "../src/components/contact-list/ContactList";

const prefix = process.env.BASE_PATH || ''

const Home: NextPage = () => {
  const isWideScreen = useMediaQuery("(min-width:932px)");
  const [drawer, setDrawer] = useState<string | null>();

  const [{ subject, body }] = useEmailTemplate();

  const contacts = useContacts();
  const [excluded, setExcluded] = useExclusionList();
  const contactsToSend = useMemo(() => {
    return contacts.filter((contact) => !excluded.includes(contact.id));
  }, [contacts, excluded]);

  return (
    <div>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href={prefix + "/favicon.ico"} />
      </Head>

      <div>
        <AppBar>
          <Toolbar>
            <Box
              sx={{
                display: "flex",
                maxWidth: 900,
                width: "100%",
                ml: "auto",
                mr: "auto",
              }}
            >
              <Button
                variant="outlined"
                color="inherit"
                startIcon={<Subject />}
                onClick={() => setDrawer("email-drawer")}
              >
                Template
              </Button>
              <Box component="div" sx={{ flexGrow: 1 }} />
              <Button
                variant="outlined"
                color="inherit"
                endIcon={<FilterList />}
                onClick={() => setDrawer("filter-drawer")}
              >
                Filter
              </Button>
            </Box>
          </Toolbar>
          <Toolbar sx={{ backgroundColor: "white", color: "black" }}>
            <Box
              sx={{
                display: "flex",
                maxWidth: 900,
                width: "100%",
                ml: "auto",
                mr: "auto",
              }}
            >
              <Button
                variant="outlined"
                startIcon={<Send />}
                disabled={!contactsToSend.length}
                onClick={(event) => {
                  globalThis.open(
                    `mailto:${contactsToSend
                      .map((c) => c.email)
                      .join(
                        window.navigator.platform.startsWith("Win") ? ";" : ","
                      )}?subject=${subject}&body=${body}`,
                    "mail"
                  );
                  event.preventDefault();
                  // if (!isExcluded) {
                  //   setExcluded([...excluded, contact.id]);
                  // }
                }}
              >
                Send bulk to {contactsToSend.length}{" "}
                {contactsToSend.length === 1 ? "member" : "members"}
              </Button>
            </Box>
          </Toolbar>
        </AppBar>
        <Toolbar />
        <Toolbar />
        <Box
          sx={{
            my: 2,
            maxWidth: 900,
            ...(isWideScreen
              ? {
                  mx: "auto",
                  width: "100%",
                }
              : {
                  mx: 2,
                  width: "calc(100% - 32px)",
                }),
          }}
        >
          <EmailTemplateDrawer
            open={drawer === "email-drawer"}
            onClose={() => setDrawer(null)}
          />
          <FilterDrawer
            open={drawer === "filter-drawer"}
            onClose={() => setDrawer(null)}
          />
          <ContactList />
        </Box>
      </div>
    </div>
  );
};

export default Home;
